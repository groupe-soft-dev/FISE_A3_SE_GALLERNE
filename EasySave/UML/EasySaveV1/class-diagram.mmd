classDiagram
direction LR

namespace View{
    class IView{
        + Run() void
    }

    class SettingsView{
        - acs : IAppControllerServices
        - languageChanged : bool
        + SettingsView(IAppControllerServices)
        + Run() void
    }

    class MenuView{
        - acs : IAppControllerServices
        + MenuView(IAppControllerServices)
        + Run() void
    }

    class ManageBackUpView{
        - acs : IAppControllerServices
        - mbuvm : IManageBackUpServices
        + ManageBackUpView(IAppControllerServices, IManageBackUpServices)
        + Run() void
    }

    class ExecuteBackUpView{
        - acs : IAppControllerServices
        - ebuvm : IExecuteBackUpServices
        + RunBackUpView(IAppControllerServices, IExecuteBackUpServices)
        + Run() void
    }

    class DetailsBackUpView{
        - acs : IAppControllerServices
        - mbuvm : IManageBackUpServices
        + ManageBackUpView(IAppControllerServices, IManageBackUpServices)
        + Run() void
    }
}

<<Interface>> IView


namespace ViewModel{

    class ICommand{
        + CanExecute(object) : bool
        + Execute(object) : void
        + CanExecuteChanged : event EventHandler
    }
    class RelayCommand{
        - execute : Action<object?>
        - canExecute : Func<object?, bool>?
        + canExecuteChanged : event EventHandler?
        + RelayCommand(Action<object?>, Func<object?, bool>?)
        + CanExecute(object?) bool
        + Execute(object?) void
        + RaiseCanExecuteChanged() void
    }

    class IAppControllerServices{
        + RunAppMenu : ICommand
        + RunManageJobs : ICommand
        + RunExecuteBackup : ICommand
        + RunSettings : ICommand
        + Exit : ICommand
    }
    class AppControllerServices{
        - localizer : ILocalizer
        + AppControllerServices(ILocalizer)
        + RunAppMenu : ICommand
        + RunManageJobs : ICommand
        + RunExecuteBackup : ICommand
        + RunSettings : ICommand
        + Exit : ICommand
    }

    class IExecuteBackUpServices{
        + ExecuteBackUpCommand : ICommand
        + IsValidInput(string) bool
        + DetectJobs(string) string
    }
    class ExecuteBackUpServices{
        + ExecuteBackUpCommand : ICommand
        + IsValidInput(string) bool
        + DetectJobs(string) string
    }

    class IManageBackUpServices{
        + CreateBackUpCommand : ICommand
        + AlterBackUpCommand : ICommand
        + DeleteBackUpCommand : ICommand
        + SelectBackUpCommand : ICommand
    }
    class ManageBackUpServices{
        - jobs : IJobs
        + CreateBackUpCommand : ICommand
        + AlterBackUpCommand : ICommand
        + DeleteBackUpCommand : ICommand
        + SelectBackUpCommand : ICommand
        + BackUpsOverviewCommand : ICommand
        + CreateBackUp(string, string, string, bool) void
        + AlterBackUp (string, string, string, bool) void
        + DeleteBackUp (int) void
        + SelectBackUp (int) void
        + SelectAllBackUp() string
    }

    class ILocalizer{
        this[string key] : string
        + ChangeLanguage(string ) void 
        + GetCurrentLanguage() string
        + GetAvailableLanguages() List<string>
    }
    class Localizer{
        - instance : Localizer
        - lock : object
        - translationManager : TranslationManager
        + Localizer()
        + Instance : static Localizer
        + this[string key] : string
        + ChangeLanguage(string) void
        + GetCurrentLanguage() string
        + GetAvailableLanguage() List<string>
    }
}

<<Interface>> ICommand
<<Interface>> ILocalizer
<<Singleton>> Localizer
<<Interface>> IManageBackUpServices
<<Interface>> IExecuteBackUpServices
<<Interface>> IAppControllerServices


SettingsView ..|> IView
MenuView ..|> IView
DetailsBackUpView ..|> IView
ExecuteBackUpView ..|> IView
ManageBackUpView ..|> IView

IAppControllerServices --> ILocalizer
ExecuteBackUpView --> IAppControllerServices
ExecuteBackUpView --> IExecuteBackUpServices
ManageBackUpView --> IAppControllerServices
ManageBackUpView --> IManageBackUpServices
DetailsBackUpView --> IAppControllerServices
DetailsBackUpView --> IManageBackUpServices

ManageBackUpServices --|> IManageBackUpServices : implements
ExecuteBackUpServices --|> IExecuteBackUpServices : implements
AppControllerServices --|> IAppControllerServices : implements
Localizer --|> ILocalizer : implements

ManageBackUpServices --> ICommand
ExecuteBackUpServices --> ICommand
AppControllerServices --> ICommand


RelayCommand --|> ICommand : implements

namespace Model{
    class IJobs{
        - executiontype : IExecutionType
        - name : string
        - source : string
        - target : string
        - type : string
        + RunJobCommand() void
        + CreateJobCommand() void
        + ModifyJobCommand() void
        + DeleteJobCommand() void
    }

    class BackUpJob {
        + int Id
        + string Name
        + string FileSource
        + string FileTarget
        + bool Differential
        + BackUpJob(string Name, string SourceDir, string TargetDir, bool Differential)
        + void Run()
        + void CreateJob()
        + void DeleteJob()
        + void AlterJob()
    }

    class ILogger{
        + GetLogDirectory() string
        + GetDailyLogDirectory() string
        + GetDailyLogPath() string 
        + GetStatusLogPath() string
        + AddLogInfo(LogType, Dictionary<string, object>) void
    }

    class Logger{
        + GetLogDirectory() string
        + GetDailyLogDirectory() string
        + GetDailyLogPath() string 
        + GetStatusLogPath() string
        + AddLogInfo(LogType, Dictionary<string, object>) void
    }

    class ConfigManager {
        - static ConfigManager _instance
        - static object _lock
        - const int MaxJobs = 5
        - string filePath
        - ConfigManager(string filePath)
        + static ConfigManager Instance
        + static void Initialize(string filePath)
        - List~BackUpJob~ LoadJobs()
        - void SaveJobs(List~BackUpJob~ jobs)
        + List~BackUpJob~ GetAllJobs()
        + void AddJob(BackUpJob job)
        + void UpdateJob(int Id, BackUpJob updatedJob)
        + int GetAvailableID()
        + void ReorganiseIndex()
        + int FindJobId(BackUpJob jobtofind)
        + void DeleteJob(int Id)
    }
    
    class IBackUpType{
        + Name : string
        + dirSource : string
        + dirTarget : string
        + Execute() void
    }

    class BackUpDifferential{
        - log : ILogger
        + Name : string
        + dirSource : string
        + dirTarget : string
        + BackUpDifferential(string, string, string)
        + Execute() void
        - WriteDailyLog(string, string, string) void
        - WriteStatusLog(double, string) void
    }

    class BackUpFull{
        - log : ILogger
        + Name : string
        + dirSource : string
        + dirTarget : string
        + BackUpFull(string, string, string)
        + Execute() void
        - WriteDailyLog(string, string, string) void
        - WriteStatusLog(double, string) void
    }

    class ITranslationManager{
        ChangeLanguage(string language) void
        GetCurrentLanguage() string
        GetTranslation(string key) string
        GetAvailableLanguages() List<string>
    }

    class TranslationManager{
        - resourcesPath : string
        - appConfigPath : string
        - language : Dictionary<string, string>
        - translations : Dictionary<string, string>
        + TranslationManager()
        + LoadAppConfigLanguage() void
        + SaveAppConfig() void
        + ChangeLanguage(string language) void
        + GetCurrentLanguage() string
        + LoadTranslations(string language) void
        + GetTranslation(string key) string
        + GetAvailableLanguages() List<string> 
        + GetDefaultTranslation(string key) string

    }
}

<<Interface>> IJobs
<<Interface>> ILogger
<<Singleton>> Logger
<<Interface>> IBackUpType

ConfigManager <-- BackUpJob : uses
BackUpJob ..|> IJobs : implements

BackUpJob --> IBackUpType : uses at runtime
IBackUpType <|.. BackUpFull : implements
IBackUpType <|.. BackUpDifferential : implements

Logger ..|> ILogger : implements 
BackUpDifferential --> ILogger : uses
BackUpFull --> ILogger : uses

TranslationManager ..|> ITranslationManager : implements

Localizer --> ITranslationManager
ManageBackUpServices --> IJobs
ExecuteBackUpServices --> IJobs
