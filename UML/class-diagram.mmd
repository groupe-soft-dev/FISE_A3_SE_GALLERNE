classDiagram
direction LR

namespace View{
    class Invoker{
        - command : ICommand
        + setCommand(ICommand) void
        + executeCommand() void
    }
}

namespace ViewModel{

    class ManageJob{
        + CreateJobCommand() void
        + ViewJobsCommand() void
        + ModifyJobCommand() void
        + DeleteJobCommand() void
    }

    class ICommand{
        + execute() void
    }

    class RunJob{
        + RunJobCommand(JobList) void
    }
}

<<Interface>> ICommand

Invoker --> ICommand

ManageJob --|> ICommand
RunJob --|> ICommand

namespace Model{
    class IJobs{
        - executiontype : IExecutionType
        - name : string
        - source : string
        - target : string
        - type : string
        + RunJobCommand() void
        + CreateJobCommand() void
        + ModifyJobCommand() void
        + DeleteJobCommand() void
    }

    class BackUpJob {
        + int Id
        + string Name
        + string FileSource
        + string FileTarget
        + BackupType Type
        + BackUpJob(string Name, string SourceDir, string TargetDir, BackupType Type)
        + void Run()
        + void CreateJob()
        + void DeleteJob()
        + void AlterJob()
    }

    class StatusLog{
        + jobname : string
        + logpath : string
        + getInstance() StatusLog
        + writeLog() void
    }

    class DailyLog{
        + filelist : list<IFile>
        + logpath : string
        + getInstance() DailyLog
        + CreateDailyLog() void
        + AddFileLog(IFile) void
    }

    class FileLog{
        - namejob : string
        - source : string
        - target : string
        - filesize : int
        - transfertime : double
        - timestamp : double
        + WriteFileLog() void
    }

class ConfigManager {
        - static ConfigManager _instance
        - static object _lock
        - const int MaxJobs = 5
        - string filePath
        - ConfigManager(string filePath)
        + static ConfigManager Instance
        + static void Initialize(string filePath)
        - List~BackUpJob~ LoadJobs()
        - void SaveJobs(List~BackUpJob~ jobs)
        + List~BackUpJob~ GetAllJobs()
        + void AddJob(BackUpJob job)
        + void UpdateJob(int Id, BackUpJob updatedJob)
        + int GetAvailableID()
        + void ReorganiseIndex()
        + int FindJobId(BackUpJob jobtofind)
        + void DeleteJob(int Id)
    }
}

<<Interface>> IJobs
<<Singleton>> StatusLog
<<Singleton>> DailyLog

RunJob --> IJobs

StatusLog ..|> BackUpJob

DailyLog ..|> FileLog

ConfigManager --> BackUpJob : uses
BackUpJob ..|> IJobs : implements
