classDiagram
direction LR

namespace View{

    class SettingsView{
        - vm : ISettingsViewModel
        - loc : ILocalizer
        - languageChanged : bool
        + SettingsView(ISettingsViewModel)
        + Run() void

    }

    class MenuView{
        - menuVm : MenuViewModel
        + MenuView(MenuViewModel)
        + Run() void
    }

    class ManageBackUpView{
        + Run() void
    }

    class ExecuteBackUpView{
        + Run() void
    }

    class DetailsBackUpView{
        + Run() void
    }

    class IView{
        + Run() void
    }

}

<<Interface>> IView


namespace ViewModel{

    class IBackUpService{

    }

    class ExecuteBackUp{

    }

    class ManageBackUp{

    }

    class ICommand{


    }

    class RelayCommand{

    }

    class IMenuViewModel
    class MenuItem
    class MenuViewModel
    class AppController
    class IAppController
    class ILocalizer
    class Localizer
    class ISettingsViewModel
    class SettingsViewModel



    class ManageJob{
        + CreateJobCommand() void
        + ViewJobsCommand() void
        + ModifyJobCommand() void
        + DeleteJobCommand() void
    }

    class ICommand{
        + execute() void
    }

    class RunJob{
        + RunJobCommand(JobList) void
    }
}

<<Interface>> ICommand


SettingsView ..|> IView
MenuView ..|> IView
DetailsBackUpView ..|> IView
ExecuteBackUpView ..|> IView
ManageBackUpView ..|> IView
IView --> ICommand

ManageJob --|> ICommand
RunJob --|> ICommand

namespace Model{
    class IJobs{
        - executiontype : IExecutionType
        - name : string
        - source : string
        - target : string
        - type : string
        + RunJobCommand() void
        + CreateJobCommand() void
        + ModifyJobCommand() void
        + DeleteJobCommand() void
    }

    class BackUpJob {
        + int Id
        + string Name
        + string FileSource
        + string FileTarget
        + bool Differential
        + BackUpJob(string Name, string SourceDir, string TargetDir, bool Differential)
        + void Run()
        + void CreateJob()
        + void DeleteJob()
        + void AlterJob()
    }

    class ILogger{
        + GetLogDirectory() string
        + GetDailyLogDirectory() string
        + GetDailyLogPath() string 
        + GetStatusLogPath() string
        + AddLogInfo(LogType logType, Dictionary<string, object> logEntry) void
    }
    

    class Logger{
        + jobname : string
        + logpath : string
        + setLog() void
        + getLog() StatusLog
        + getDailyLog() void
    }

    class ConfigManager {
        - static ConfigManager _instance
        - static object _lock
        - const int MaxJobs = 5
        - string filePath
        - ConfigManager(string filePath)
        + static ConfigManager Instance
        + static void Initialize(string filePath)
        - List~BackUpJob~ LoadJobs()
        - void SaveJobs(List~BackUpJob~ jobs)
        + List~BackUpJob~ GetAllJobs()
        + void AddJob(BackUpJob job)
        + void UpdateJob(int Id, BackUpJob updatedJob)
        + int GetAvailableID()
        + void ReorganiseIndex()
        + int FindJobId(BackUpJob jobtofind)
        + void DeleteJob(int Id)
    }
    
    class IBackUpType{
        + execute() bool
    }

    class DifferentialType{
        + name : string
        + FileSource : string
        + FileTarget : string
        + execute() bool
    }

    class FullType{
        + name : string
        + FileSource : string
        + FileTarget : string
        + execute() bool
    }

    class ITranslationManager{
        ChangeLanguage(string language) void
        GetCurrentLanguage() string
        GetTranslation(string key) string
        GetAvailableLanguages() List<string>
    }

    class TranslationManager{
        - resourcesPath : string
        - appConfigPath : string
        - language : Dictionary<string, string>
        - translations : Dictionary<string, string>
        + TranslationManager()
        + LoadAppConfigLanguage() void
        + SaveAppConfig() void
        + ChangeLanguage(string language) void
        + GetCurrentLanguage() string
        + LoadTranslations(string language) void
        + GetTranslation(string key) string
        + GetAvailableLanguages() List<string> 
        + GetDefaultTranslation(string key) string

    }
}

<<Interface>> IJobs
<<Interface>> ILogger
<<Singleton>> Logger
<<Interface>> IBackUpType
RunJob --> IJobs

ConfigManager <-- BackUpJob : uses
BackUpJob ..|> IJobs : implements

BackUpJob --> IBackUpType : uses at runtime
IBackUpType <|.. FullType : implements
IBackUpType <|.. DifferentialType : implements

Logger ..|> ILogger : implements 
BackUpJob --> ILogger : uses

TranslationManager ..|> ITranslationManager : implements